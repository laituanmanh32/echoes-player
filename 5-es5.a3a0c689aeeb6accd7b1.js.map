{"version":3,"sources":["webpack:///src/app/containers/user/index.ts","webpack:///src/app/containers/user/user.component.ts","webpack:///src/app/containers/user/user.component.ts.UserComponent.html","webpack:///src/app/containers/user/user-player.service.ts","webpack:///src/app/containers/user/playlists/playlists.component.ts","webpack:///src/app/containers/user/playlists/playlists.component.ts.PlaylistsComponent.html","webpack:///src/app/containers/user/user.guard.ts"],"names":["UserModule","user_component_UserComponent","appApi","store","this","playlists$","select","user_profile_selectors","c","currentPlaylist$","d","isSignedIn$","a","signinUser","_l","core","_v","en","$event","ad","_co","component","icon_directive_ngfactory","b","icon_directive","ElementRef","Renderer2","name","_ck","app_navbar_component_ngfactory","app_navbar_component","authorization_service","app_api","header","headerIcon","View_UserComponent_1","common","k","ViewContainerRef","TemplateRef","ngIf","ChangeDetectorRef","router","r","ComponentFactoryResolver","transform","user_player_service_UserPlayerService","nowPlaylistService","userProfile","playlist","fetchPlaylistItems","id","subscribe","items","dispatch","now_playlist","h","updateIndexByMedia","app_player","media","g","n","PlaylistsComponent","userPlayerService","state","user","playlists","playSelectedPlaylist","queuePlaylist","youtube_playlist_ngfactory","youtube_playlist","link","play","queue","context","$implicit","View_PlaylistsComponent_1","j","IterableDiffers","ngForOf","AuthGuard","authorization","route","url","checkLogin","canActivate","isSignIn","navigate"],"mappings":"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","file":"5-es5.a3a0c689aeeb6accd7b1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { SharedModule } from '@shared/index';\nimport { AppNavbarModule } from '../app-navbar';\n\nimport { PlaylistViewModule } from '../playlist-view'\n\nimport { UserComponent } from './user.component';\nimport { PlaylistsComponent } from './playlists';\n// import { PlaylistViewComponent, PlaylistResolver, PlaylistVideosResolver } from '@shared/components/playlist-view';\n\nimport { AuthGuard } from './user.guard';\nimport { UserPlayerService } from './user-player.service';\nimport { routing } from './user.routing';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    AppNavbarModule,\n    PlaylistViewModule,\n    routing\n  ],\n  declarations: [\n    UserComponent,\n    PlaylistsComponent\n  ],\n  exports: [\n    UserComponent\n  ],\n  providers: [\n    AuthGuard,\n    UserPlayerService,\n    // PlaylistResolver,\n    // PlaylistVideosResolver\n  ]\n})\nexport class UserModule { }\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { EchoesState } from '@core/store';\n\nimport * as UserProfile from '@core/store/user-profile/user-profile.selectors';\nimport { AppApi } from '@api/app.api';\n\n@Component({\n  selector: 'app-user',\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./user.scss'],\n  template: `\n  <article>\n    <app-navbar\n      [header]=\"'My Profile - My Playlists'\"\n      [headerIcon]=\"'heart-o'\"\n    ></app-navbar>\n    <p *ngIf=\"!(isSignedIn$ | async)\" class=\"well lead\">\n      To view your playlists in youtube, you need to sign in.\n      <button class=\"btn btn-lg btn-primary\"\n        (click)=\"signInUser()\">\n        <icon name=\"google\"></icon> Sign In\n      </button>\n    </p>\n    <router-outlet></router-outlet>\n  </article>\n  `\n})\nexport class UserComponent implements OnInit {\n  playlists$ = this.store.select(UserProfile.getUserPlaylists);\n  currentPlaylist$ = this.store.select(UserProfile.getUserViewPlaylist);\n  isSignedIn$ = this.store.select(UserProfile.getIsUserSignedIn);\n\n  constructor(private appApi: AppApi, public store: Store<EchoesState>) {}\n\n  ngOnInit() {}\n\n  signInUser() {\n    this.appApi.signinUser();\n  }\n}\n","\n  <article>\n    <app-navbar\n      [header]=\"'My Profile - My Playlists'\"\n      [headerIcon]=\"'heart-o'\"\n    ></app-navbar>\n    <p *ngIf=\"!(isSignedIn$ | async)\" class=\"well lead\">\n      To view your playlists in youtube, you need to sign in.\n      <button class=\"btn btn-lg btn-primary\"\n        (click)=\"signInUser()\">\n        <icon name=\"google\"></icon> Sign In\n      </button>\n    </p>\n    <router-outlet></router-outlet>\n  </article>\n  ","import { Store } from '@ngrx/store';\nimport { Injectable } from '@angular/core';\nimport { YoutubePlayerService, NowPlaylistService, UserProfile } from '@core/services';\nimport { EchoesState } from '@core/store';\nimport * as NowPlaylist from '@core/store/now-playlist';\nimport * as AppPlayer from '@core/store/app-player';\n\n@Injectable()\nexport class UserPlayerService {\n  constructor(\n    private nowPlaylistService: NowPlaylistService,\n    private userProfile: UserProfile,\n    private store: Store<EchoesState>\n  ) { }\n\n  playSelectedPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\n    this.userProfile\n      .fetchPlaylistItems(playlist.id, '')\n      .subscribe((items: GoogleApiYouTubeVideoResource[]) => {\n        this.store.dispatch(new NowPlaylist.QueueVideos(items));\n        this.nowPlaylistService.updateIndexByMedia(items[0].id);\n        this.store.dispatch(new AppPlayer.LoadAndPlay(items[0]));\n      });\n  }\n\n  queuePlaylist(playlist: GoogleApiYouTubePlaylistResource) {\n    this.userProfile\n      .fetchPlaylistItems(playlist.id, '')\n      .subscribe((items: GoogleApiYouTubeVideoResource[]) => {\n        this.store.dispatch(new NowPlaylist.QueueVideos(items));\n        return items;\n      });\n  }\n\n  queueVideo(media: GoogleApiYouTubeVideoResource) {\n    this.store.dispatch(new NowPlaylist.QueueVideo(media));\n  }\n\n  playVideo(media: GoogleApiYouTubeVideoResource) {\n    this.store.dispatch(new AppPlayer.LoadAndPlay(media));\n    this.store.dispatch(new NowPlaylist.QueueVideo(media));\n    this.store.dispatch(new NowPlaylist.SelectVideo(media));\n  }\n}\n","import { UserPlayerService } from '../user-player.service';\nimport { EchoesState } from '@core/store';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\n@Component({\n  selector: 'playlists',\n  template: `\n  <section class=\"videos-list\">\n    <div class=\"list-unstyled ux-maker youtube-items-container clearfix\">\n      <youtube-playlist\n        *ngFor=\"let playlist of playlists$ | async\"\n        [media]=\"playlist\"\n        link=\"/user/\"\n        (play)=\"playSelectedPlaylist(playlist)\"\n        (queue)=\"queueSelectedPlaylist(playlist)\">\n      </youtube-playlist>\n    </div>\n  </section>\n  `\n})\nexport class PlaylistsComponent implements OnInit {\n  playlists$ = this.store.select(state => state.user.playlists);\n\n  constructor(\n    private store: Store<EchoesState>,\n    private userPlayerService: UserPlayerService\n  ) { }\n\n  ngOnInit() { }\n\n  playSelectedPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\n    this.userPlayerService.playSelectedPlaylist(playlist);\n  }\n\n  queueSelectedPlaylist(playlist: GoogleApiYouTubePlaylistResource) {\n    this.userPlayerService.queuePlaylist(playlist);\n  }\n}\n","\n  <section class=\"videos-list\">\n    <div class=\"list-unstyled ux-maker youtube-items-container clearfix\">\n      <youtube-playlist\n        *ngFor=\"let playlist of playlists$ | async\"\n        [media]=\"playlist\"\n        link=\"/user/\"\n        (play)=\"playSelectedPlaylist(playlist)\"\n        (queue)=\"queueSelectedPlaylist(playlist)\">\n      </youtube-playlist>\n    </div>\n  </section>\n  ","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, CanActivateChild, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { Authorization } from '@core/services';\n\n@Injectable()\nexport class AuthGuard implements CanActivate, CanActivateChild {\n  constructor(private authorization: Authorization, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // console.log('AuthGuard#canActivate called', { state });\n    const url: string = state.url;\n    return this.checkLogin(url);\n  }\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return this.canActivate(route, state);\n  }\n\n  checkLogin(url: string): boolean {\n    if (this.authorization.isSignIn()) { return true; }\n\n    // Store the attempted URL for redirecting\n    // this.authService.redirectUrl = url;\n\n    // Navigate to the login page with extras\n    this.router.navigate(['/user']);\n    return false;\n  }\n}\n"]}